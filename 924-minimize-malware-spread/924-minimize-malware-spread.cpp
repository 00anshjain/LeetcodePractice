class Solution {
public:
    vector<int> parent, sz;
    int findParent(int a)
    {
        if(parent[a] == a)
            return a;
        return parent[a] = findParent(parent[a]);
    }
    void unionSet(int a, int b)
    {
        int p1 = findParent(a);
        int p2 = findParent(b);
        if(p1 != p2)
        {
            if(sz[p1] > sz[p2])
            {
                parent[p2] = p1;
                sz[p1] += sz[p2];
            }
            else
            {
                parent[p1] = p2;
                sz[p2] += sz[p1];
            }
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n = graph.size();
        // vector<int> parent(n);
        // vector<int> sz(n);
        parent.resize(n);
        sz.resize(n);
        for(int i = 0; i < n; i++)
        {
            parent[i] = i;
            sz[i] = 1;
        }
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < i; j++)
            {
                if(graph[i][j])
                    unionSet(i, j);
            }
        }
        vector<int> infected(n, 0);
        // unordered_set<int> par;
        for(auto x : initial)
        {
            int p = findParent(x);
            infected[p]++;
            // par.insert(p);
        }
        int ans = INT_MAX;
        int saved = -1;
        for(auto x : initial)
        {
            int p = findParent(x);
            if(infected[p] == 1)
            {
                int newSave = sz[p];
                if(newSave > saved)
                {
                    saved = newSave;
                    ans = x;
                }
                else if(newSave == saved)
                    ans = min(ans, x);
            }
            if(saved == -1)
                ans = min(ans, x);
        }
        return ans;
    }
};