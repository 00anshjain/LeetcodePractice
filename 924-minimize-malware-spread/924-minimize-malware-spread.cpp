class Solution {
public:
    vector<int> parent, sz;
    int findParent(int a)
    {
        if(parent[a] == a)
            return a;
        return parent[a] = findParent(parent[a]);
    }
    void unionSet(int a, int b)
    {
        int p1 = findParent(a);
        int p2 = findParent(b);
        if(p1 != p2)
        {
            if(sz[p1] > sz[p2])
            {
                parent[p2] = p1;
                sz[p1] += sz[p2];
            }
            else
            {
                parent[p1] = p2;
                sz[p2] += sz[p1];
            }
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n = graph.size();
        // vector<int> parent(n);
        // vector<int> sz(n);
        parent.resize(n);
        sz.resize(n);
        for(int i = 0; i < n; i++)
        {
            parent[i] = i;
            sz[i] = 1;
        }
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < i; j++)
            {
                if(graph[i][j])
                    unionSet(i, j);
            }
        }
        vector<int> infected(n);
        for(auto i : initial)
        {
            int p = findParent(i);
            infected[p]++;
        }
        int ans = -1;
        int maxSaved = 0;
        for(auto e : initial)
        {
            int p = findParent(e);
            if(infected[p] == 1)
            {
                if(maxSaved < sz[p])
                {
                    maxSaved = sz[p];
                    ans = e;
                }
                else if(maxSaved == sz[p])
                {
                    ans = min(ans, e);
                }
            }
        }
        if(ans == -1)
            return *min_element(initial.begin(), initial.end());
        return ans;
        // return 0;
    }
};