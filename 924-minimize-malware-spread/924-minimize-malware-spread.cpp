class Solution {
public:
    /*
    Can anyone please explain this ?
[[1,1,0],[1,1,0],[0,0,1]]
[0,1,2]
Output = 2 ?
I thought it said we should return the one with smaller index, which is 0?
        
 Answer Given:
 You are not removing the node from the graph, just removing it from the list of places the infection starts.
So removing 0 or 1 from the list leads to 3 infected nodes, while removing 2 leads to 2.
        
        */
    int n;
    void DFS(int u, vector<int> &nodes, vector<int> &badNodes, vector<vector<int>>& graph, vector<bool>& visited, unordered_set<int> &bad)
    {
        visited[u] = true;
        if(bad.find(u) != bad.end())
            badNodes.push_back(u);
        else
            nodes.push_back(u);
        for(int i = 0; i< n; i++)
        {
            if(!visited[i] && graph[u][i])
            {
                DFS(i, nodes, badNodes, graph, visited, bad);
            }
        }
        
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n = graph.size();
        // vector<vector<int>> connectedComponents;
        unordered_set<int> bad(initial.begin(), initial.end());
        vector<int> adj[n];
        vector<bool> visited(n, false);
        int ans = *min_element(initial.begin(), initial.end());
        int maxSaved = 0;
        for(int i = 0; i < n; i++)
        {
            if(!visited[i])
            {
                vector<int> nodes;
                vector<int> badNodes;
                DFS(i, nodes, badNodes, graph, visited, bad);
                if(badNodes.size() == 1)
                {
                    // cout<<badNodes[0]<<" "<<nodes.size() +1<<" "<<maxSaved<<" ";
                    if(nodes.size()+1 == maxSaved)
                    {
                        ans = min(ans, badNodes[0]);
                        maxSaved = nodes.size() + 1;
                        // cout<<ans<<endl;
                    }
                    else if((nodes.size()+1) > maxSaved)
                    {
                        // cout<<"In "; 
                        ans = badNodes[0];
                        maxSaved = nodes.size()+1;
                        // cout<<ans<<endl;
                    }
                }
            }
        }
        return ans;
    }
};